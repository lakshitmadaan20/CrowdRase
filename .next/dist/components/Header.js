'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\blockchain projects\\kickstarter\\components\\Header.js';


var Header = function (_Component) {
  (0, _inherits3.default)(Header, _Component);

  function Header() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Header);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Header.__proto__ || (0, _getPrototypeOf2.default)(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = { activeItem: 'home' }, _this.handleItemClick = function (e, _ref2) {
      var name = _ref2.name;
      return _this.setState({ activeItem: name });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Header, [{
    key: 'render',
    value: function render() {
      var activeItem = this.state.activeItem;

      return _react2.default.createElement(_semanticUiReact.Segment, { inverted: true, color: 'blue', __source: {
          fileName: _jsxFileName,
          lineNumber: 14
        }
      }, _react2.default.createElement(_semanticUiReact.Menu, { inverted: true, secondary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 15
        }
      }, _react2.default.createElement(_semanticUiReact.Menu.Item, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 16
        }
      }, _react2.default.createElement('h2', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 17
        }
      }, 'Crowd Rase')), _react2.default.createElement(_routes.Link, { route: '/about/show', __source: {
          fileName: _jsxFileName,
          lineNumber: 20
        }
      }, _react2.default.createElement(_semanticUiReact.Menu.Item, {
        position: 'right',
        name: 'about',
        active: activeItem === 'messages',
        onClick: this.handleItemClick,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 21
        }
      })), _react2.default.createElement(_routes.Link, { route: '/', __source: {
          fileName: _jsxFileName,
          lineNumber: 29
        }
      }, _react2.default.createElement(_semanticUiReact.Menu.Item, {
        name: 'home',
        active: activeItem === 'friends',
        onClick: this.handleItemClick,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      }))));
    }
  }]);

  return Header;
}(_react.Component);

exports.default = Header;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSGVhZGVyIiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX19wcm90b19fIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJhY3RpdmVJdGVtIiwiaGFuZGxlSXRlbUNsaWNrIiwiZSIsIl9yZWYyIiwibmFtZSIsInNldFN0YXRlIiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiaW52ZXJ0ZWQiLCJjb2xvciIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwic2Vjb25kYXJ5IiwiSXRlbSIsInJvdXRlIiwicG9zaXRpb24iLCJhY3RpdmUiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUhBLElBQUlBLGVBQWUsNkRBQW5COzs7QUFLQSxJQUFJQyxTQUFTLFVBQVVDLFVBQVYsRUFBc0I7QUFDakMsMEJBQVVELE1BQVYsRUFBa0JDLFVBQWxCOztBQUVBLFdBQVNELE1BQVQsR0FBa0I7QUFDaEIsUUFBSUUsSUFBSjs7QUFFQSxRQUFJQyxLQUFKLEVBQVdDLEtBQVgsRUFBa0JDLElBQWxCOztBQUVBLGtDQUFnQixJQUFoQixFQUFzQkwsTUFBdEI7O0FBRUEsU0FBSyxJQUFJTSxPQUFPQyxVQUFVQyxNQUFyQixFQUE2QkMsT0FBT0MsTUFBTUosSUFBTixDQUFwQyxFQUFpREssT0FBTyxDQUE3RCxFQUFnRUEsT0FBT0wsSUFBdkUsRUFBNkVLLE1BQTdFLEVBQXFGO0FBQ25GRixXQUFLRSxJQUFMLElBQWFKLFVBQVVJLElBQVYsQ0FBYjtBQUNEOztBQUVELFdBQU9OLFFBQVFGLFNBQVNDLFFBQVEseUNBQTJC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