'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _Donation = require('../components/Donation');

var _Donation2 = _interopRequireDefault(_Donation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\blockchain projects\\kickstarter\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',
    value: function renderCampaigns() {
      var items = this.props.campaigns.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          }, 'View Campaign'))
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, _react2.default.createElement('h1', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, 'Trending Campaigns'), _react2.default.createElement('hr', { style: { borderTop: '1px solid black' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }, this.renderCampaigns()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        className: 'btn btn-block',
        content: 'Create Campaign',
        icon: 'add circle',
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }))), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }), _react2.default.createElement('hr', { style: { borderTop: '1px solid black' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement('h2', { className: 'text-center', __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'Perks Of Donating'), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }), _react2.default.createElement('div', { className: 'jumbotron', __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement(_Donation2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      })))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var campaigns;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedCampaigns().call();

              case 2:
                campaigns = _context.sent;
                return _context.abrupt('return', { campaigns: campaigns });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWducyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJyb3V0ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiR3JvdXAiLCJyZW5kZXIiLCJzdHlsZSIsImJvcmRlclRvcCIsIlJvdyIsIkNvbHVtbiIsIndpZHRoIiwiY2xhc3NOYW1lIiwiY29udGVudCIsImljb24iLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZENhbXBhaWducyIsImNhbGwiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsImdldEluaXRpYWxQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSw2REFBbkI7OztBQVFBLElBQUlDLGdCQUFnQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3hDLDBCQUFVRCxhQUFWLEVBQXlCQyxVQUF6Qjs7QUFFQSxXQUFTRCxhQUFULEdBQXlCO0FBQ3ZCLGtDQUFnQixJQUFoQixFQUFzQkEsYUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsY0FBY0UsU0FBZCxJQUEyQiw4QkFBdUJGLGFBQXZCLENBQTVCLEVBQW1FRyxLQUFuRSxDQUF5RSxJQUF6RSxFQUErRUMsU0FB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